{"version":3,"sources":["getWeb3.js","components/ModalAlert.jsx","components/ModalEvent.jsx","components/Workflow.jsx","img/0.svg","img/1.svg","img/2.svg","img/3.svg","img/4.svg","img/5.svg","App.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","ModalAlert","props","showAlert","messageAlert","closeModalAlert","Modal","show","onHide","dialogClassName","Header","closeButton","className","Title","id","class","Body","ModalEvent","showEvent","messageEvent","closeModalEvent","Workflow","srcImg","workflowStatusId","statusWF","actualAccount","statusButton","owner","handleWorkflow","Card","Img","variant","src","toUpperCase","length","Form","Button","onClick","test","type","App","useState","accounts","contract","data","setData","setShowAlert","setMessageAlert","setShowEvent","setMessageEvent","contentForm","setContentForm","eventValue","setEventValue","setWorkflowStatusId","setActualAccount","voter","setVoter","votersList","setVotersList","proposalsList","setProposalsList","currentVote","setCurrentVote","voteOK","setVoteOK","winnersList","setWinnersList","img0","setSrcImg","refAddress","useRef","refProposal","useEffect","init","on","img1","img2","img3","img4","img5","methods","getVoter","call","hasVoted","old","eth","getAccounts","net","getId","networkId","deployedNetwork","VotingContract","networks","instance","Contract","abi","address","getWorkflowStatus","statusId","events","allEvents","err","evt","event","alert","error","e","preventDefault","startProposalsRegistering","send","from","endProposalsRegistering","startVotingSession","fetchAllProposals","endVotingSession","handleResult","message","plusVoter","current","value","addVoter","plusProposal","val","addProposal","getAllProposals","list","handleVote","setVote","tallyVotesDraw","getWinners","Group","controlId","Label","InputGroup","Text","Control","ref","onChange","target","Footer","ListGroup","map","i","Item","onSubmit","Check","label","name","Table","striped","bordered","sort","b","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.832a1987.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React from 'react'\r\nimport Modal from 'react-bootstrap/Modal';\r\n\r\n\r\nconst ModalAlert = (props) => {\r\n  const { showAlert, messageAlert, closeModalAlert } = props\r\n  return (\r\n    <>\r\n      <Modal\r\n        show={showAlert}\r\n        onHide={closeModalAlert}\r\n        dialogClassName=\"modal-90w\"\r\n        aria-labelledby=\"alert-modal\">\r\n        <Modal.Header closeButton className=\"bg-warning text-black\">\r\n          <Modal.Title id=\"alert-modal\">\r\n            <i class=\"bi bi-exclamation-octagon-fill\"></i> ALERTE\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body className=\"bg-warning text-black bg-opacity-75 fs-4\">{messageAlert}</Modal.Body>\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ModalAlert\r\n","import React from 'react'\r\nimport Modal from 'react-bootstrap/Modal';\r\n\r\n\r\nconst ModalEvent = (props) => {\r\n  const { showEvent, messageEvent, closeModalEvent } = props\r\n  return (\r\n    <>\r\n      <Modal\r\n        show={showEvent}\r\n        onHide={closeModalEvent}\r\n        dialogClassName=\"modal-90w\"\r\n        aria-labelledby=\"alert-modal\">\r\n        <Modal.Header closeButton className=\"bg-success text-white\">\r\n          <Modal.Title id=\"alert-modal\">\r\n            <i class=\"bi bi-check-square-fill\"></i> VALIDATION\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body className=\"bg-success text-white bg-opacity-75 fs-4\">{messageEvent}</Modal.Body>\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ModalEvent\r\n","import React from 'react'\r\nimport Card from 'react-bootstrap/Card';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\nconst Workflow = (props) => {\r\n  const { srcImg, workflowStatusId, statusWF, actualAccount, statusButton, owner, handleWorkflow } = props\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <Card className=\"text-center\">\r\n        <Card.Img className=\"bg-white\" variant=\"top\" src={srcImg} />\r\n        <Card.Header className=\"fs-1 bg-light text-dark text-uppercase\">\r\n          <strong>{statusWF[workflowStatusId]}</strong></Card.Header>\r\n        {(actualAccount ? actualAccount.toUpperCase() === owner.toUpperCase() : true) &&\r\n          workflowStatusId < statusButton.length &&\r\n          <Card.Body>\r\n            <Form>\r\n              <Button className=\"text-uppercase\" onClick={handleWorkflow}\r\n                variant={/[13]/.test(workflowStatusId) ? \"danger\" : \"success\"} type=\"submit\">\r\n                <i class={/[13]/.test(workflowStatusId) ? \"bi bi-stop-circle-fill\" : \"bi bi-play-circle-fill\"}> </i>\r\n                {workflowStatusId < statusButton.length ? statusButton[workflowStatusId] : \"Terminé\"}\r\n              </Button>\r\n            </Form>\r\n          </Card.Body>}\r\n      </Card>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Workflow\r\n","export default __webpack_public_path__ + \"static/media/0.764c16f6.svg\";","export default __webpack_public_path__ + \"static/media/1.0c5b1976.svg\";","export default __webpack_public_path__ + \"static/media/2.89703896.svg\";","export default __webpack_public_path__ + \"static/media/3.a26a7e53.svg\";","export default __webpack_public_path__ + \"static/media/4.18b011ff.svg\";","export default __webpack_public_path__ + \"static/media/5.8b94cd6e.svg\";","import React, { useState, useEffect, useRef } from \"react\";\nimport VotingContract from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Card from 'react-bootstrap/Card';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Table from 'react-bootstrap/Table';\nimport InputGroup from 'react-bootstrap/InputGroup';\n\nimport ModalAlert from './components/ModalAlert'\nimport ModalEvent from './components/ModalEvent'\nimport Workflow from './components/Workflow'\nimport Voters from './components/Voters'\n\nimport img0 from \"./img/0.svg\";\nimport img1 from \"./img/1.svg\";\nimport img2 from \"./img/2.svg\";\nimport img3 from \"./img/3.svg\";\nimport img4 from \"./img/4.svg\";\nimport img5 from \"./img/5.svg\";\n\nconst App = () => {\n  const [data, setData] = useState({\n    web3: null,\n    accounts: null,\n    owner: null,\n    contract: null,\n  });\n\n  const [showAlert, setShowAlert] = useState(false)\n  const [messageAlert, setMessageAlert] = useState('')\n  const [showEvent, setShowEvent] = useState(false)\n  const [messageEvent, setMessageEvent] = useState('')\n  const [contentForm, setContentForm] = useState('')\n  const [eventValue, setEventValue] = useState('')\n  const [workflowStatusId, setWorkflowStatusId] = useState(\"0\")\n  const [actualAccount, setActualAccount] = useState('')\n  const [voter, setVoter] = useState(null)\n  const [votersList, setVotersList] = useState([])\n  const [proposalsList, setProposalsList] = useState([])\n  const [currentVote, setCurrentVote] = useState(null)\n  const [voteOK, setVoteOK] = useState(false)\n  const [winnersList, setWinnersList] = useState(null)\n  const [srcImg, setSrcImg] = useState(img0)\n\n  const statusWF = [\n    'Enregistrement des voteurs en cours',\n    'Enregistrement des propositions en cours',\n    'Enregistrement des propositions terminée',\n    'Session de vote en cours',\n    'Session de vote terminée',\n    'Résultats des votes'\n  ]\n  const statusButton = [\n    \"Débuter l'enregistrement des propositions\",\n    \"Stopper l'enregistrement des propositions\",\n    \"Débuter la session de vote\",\n    \"Stopper la session de vote\",\n    \"Afficher le résultat des votes\"\n  ]\n\n  const refAddress = useRef();\n  const refProposal = useRef();\n\n  const closeModalAlert = () => setShowAlert(false)\n  const closeModalEvent = () => setShowEvent(false)\n\n\n  useEffect(() => {\n    init();\n  }, []);\n\n  useEffect(() => {\n    window.ethereum.on(\"accountsChanged\", accounts => {\n      if (accounts.length > 0) setActualAccount(accounts[0]);\n    });\n  });\n\n  useEffect(() => {\n    switch (workflowStatusId) {\n      case \"1\":\n        setSrcImg(img1)\n        break;\n      case \"2\":\n        setSrcImg(img2)\n        break;\n      case \"3\":\n        setSrcImg(img3)\n        break;\n      case \"4\":\n        setSrcImg(img4)\n        break;\n      case \"5\":\n        setSrcImg(img5)\n        break;\n      default:\n        break;\n    }\n    console.log(`workflowStatusId`, workflowStatusId)\n  }, [workflowStatusId]);\n\n  useEffect(() => {\n    (workflowStatusId === \"3\") && (async () => {\n      const { contract } = data;\n      const voter = await contract.methods.getVoter(actualAccount).call();\n      setVoteOK(voter.hasVoted)\n    })()\n  }, [actualAccount])\n\n  useEffect(() => {\n    if (voter) {\n      setVotersList(old => [...old, voter])\n      setVoter(null)\n    }\n  }, [voter]);\n\n  useEffect(() => {\n    if (eventValue === \"VoterRegistered\") {\n      setMessageEvent(\"Le voteur a été enregistré\")\n      setShowEvent(true)\n      setEventValue('')\n    }\n    if (eventValue === \"ProposalRegistered\") {\n      setMessageEvent(\"La proposition a été enregistrée\")\n      setShowEvent(true)\n      setEventValue('')\n    }\n    if (eventValue === \"Voted\") {\n      setMessageEvent(\"Le vote a été enregistré\")\n      setShowEvent(true)\n      setEventValue('')\n    }\n  }, [eventValue]);\n\n  const init = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n      const owner = await accounts[0];\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = VotingContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        VotingContract.abi,\n        deployedNetwork && deployedNetwork.address\n      );\n\n      const statusId = await instance.methods.getWorkflowStatus().call()\n      setWorkflowStatusId(statusId)\n\n      // Set web3, accounts, and contract to the data, and then proceed with an\n      // example of interacting with the contract's methods.\n      setData({ web3, accounts, owner, contract: instance });\n\n      // Get All events emitted\n      await instance.events.allEvents((err, evt) => {\n        setEventValue(evt.event)\n      })\n\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n      console.error(error);\n    }\n  };\n\n  const handleWorkflow = async (e) => {\n    e.preventDefault()\n    setEventValue('')\n    try {\n      const { owner, contract } = data;\n      switch (workflowStatusId) {\n        case \"0\":\n          await contract.methods.startProposalsRegistering().send({ from: owner });\n          break;\n        case \"1\":\n          await contract.methods.endProposalsRegistering().send({ from: owner });\n          break;\n        case \"2\":\n          await contract.methods.startVotingSession().send({ from: owner });\n          fetchAllProposals()\n          break;\n        case \"3\":\n          await contract.methods.endVotingSession().send({ from: owner });\n          break;\n        case \"4\":\n          handleResult()\n          break;\n\n        default:\n          break;\n      }\n      const statusId = await contract.methods.getWorkflowStatus().call()\n      setWorkflowStatusId(statusId)\n\n    } catch (error) {\n      console.log(`error`, error)\n      if (/Registering proposals cant be started now/.test(error.message)) {\n        setMessageAlert(\"L'enregistrement des propositions ne peut pas commencer maintenant !\")\n        setShowAlert(true)\n      } else if (/Registering proposals havent started yet/.test(error.message)) {\n        setMessageAlert(\"L'enregistrement des propositions n'a pas commencé !\")\n        setShowAlert(true)\n      } else if (/Registering proposals phase is not finished/.test(error.message)) {\n        setMessageAlert(\"L'enregistrement des propositions n'est pas terminé !\")\n        setShowAlert(true)\n      } else if (/Voting session havent started yet/.test(error.message)) {\n        setMessageAlert(\"La session de votes n'a pas commencé !\")\n        setShowAlert(true)\n      } else if (/Current status is not voting session ended/.test(error.message)) {\n        setMessageAlert(\"La session de votes n'est pas terminé !\")\n        setShowAlert(true)\n      } else {\n        setMessageAlert('Erreur inconnue !')\n        setShowAlert(true)\n      }\n    }\n  }\n\n  const plusVoter = async (e) => {\n    e.preventDefault()\n    try {\n      const { contract, owner } = data;\n      const address = refAddress.current.value;\n\n      await contract.methods.addVoter(address).send({ from: owner });\n      const voter = await contract.methods.getVoter(address).call();\n      setVoter([voter, address])\n\n    } catch (error) {\n      // console.log(`error`, error.message)\n      if (/Already registered/.test(error.message)) {\n        setMessageAlert('Adresse déjà enregistrée !')\n        setShowAlert(true)\n      } else if (/Voters registration is not open yet/.test(error.message)) {\n        setMessageAlert('Enregistrement des voteurs inactive !')\n        setShowAlert(true)\n      } else if (/The address cannot be empty/.test(error.message)) {\n        setMessageAlert(\"L'adresse ne peut être vide !\")\n        setShowAlert(true)\n      } else {\n        setMessageAlert('Erreur inconnue voter')\n        setShowAlert(true)\n      }\n    }\n    setContentForm(\"\")\n  }\n\n  const plusProposal = async (e) => {\n    setEventValue('')\n    e.preventDefault()\n    try {\n      const { owner, contract } = data;\n      const val = refProposal.current.value;\n\n      await contract.methods.addProposal(val).send({ from: actualAccount || owner });\n      fetchAllProposals()\n\n    } catch (error) {\n      if (/Proposals are not allowed yet/.test(error.message)) {\n        setMessageAlert(\"L'enregistrement des propositions n'est pas encore possible !\")\n        setShowAlert(true)\n      } else if (/The proposal cannot be empty/.test(error.message)) {\n        setMessageAlert('La proposition ne peut être vide !')\n        setShowAlert(true)\n      } else if (/You're not a voter/.test(error.message)) {\n        setMessageAlert(\"Vous n'êtes pas enregistré comme voteur !\")\n        setShowAlert(true)\n      } else {\n        setMessageAlert('Erreur inconnue proposal')\n        setShowAlert(true)\n        console.log(error)\n      }\n    }\n    setContentForm(\"\")\n  }\n\n  const fetchAllProposals = async () => {\n    const { contract } = data;\n    const list = await contract.methods.getAllProposals().call();\n    setProposalsList(list)\n  }\n\n  const handleVote = async (e) => {\n    setEventValue('')\n    e.preventDefault()\n    try {\n      const { owner, contract } = data;\n      fetchAllProposals()\n      await contract.methods.setVote(currentVote).send({ from: actualAccount || owner });\n      setVoteOK(true)\n\n    } catch (error) {\n      if (/Voting session havent started yet/.test(error.message)) {\n        setMessageAlert(\"La session de vote n'a pas encore débuté !\")\n        setShowAlert(true)\n      } else if (/You have already voted/.test(error.message)) {\n        setMessageAlert('Vous avez déjà voté !')\n        setShowAlert(true)\n      } else if (/Proposal not found/.test(error.message)) {\n        setMessageAlert(\"La proposition n'existe pas !\")\n        setShowAlert(true)\n      } else if (/You're not a voter/.test(error.message)) {\n        setMessageAlert(\"Vous n'êtes pas enregistré comme voteur !\")\n        setShowAlert(true)\n      } else {\n        setMessageAlert('Erreur inconnue vote')\n        setShowAlert(true)\n        console.log(error)\n      }\n    }\n  }\n\n  const handleResult = async (e) => {\n    setEventValue('')\n    try {\n      const { owner, contract } = data;\n      fetchAllProposals()\n      await contract.methods.tallyVotesDraw().send({ from: owner });\n      const list = await contract.methods.getWinners().call();\n      setWinnersList(list)\n      const statusId = await contract.methods.getWorkflowStatus().call()\n      setWorkflowStatusId(statusId)\n\n    } catch (error) {\n      if (/Current status is not voting session ended/.test(error.message)) {\n        setMessageAlert(\"La session de vote n'est pas encore terminée !\")\n        setShowAlert(true)\n      } else if (/You're not a voter/.test(error.message)) {\n        setMessageAlert(\"Vous n'êtes pas enregistré comme voteur !\")\n        setShowAlert(true)\n      } else {\n        setMessageAlert('Erreur inconnue result')\n        setShowAlert(true)\n        console.log(error)\n      }\n    }\n  }\n\n  const { owner, web3 } = data\n  return !web3 ? (\n    <div className=\"container\">Loading Web3, accounts, and contract...</div>\n  ) : (\n\n    <>\n    {/* WORKFLOW */}\n      <Workflow srcImg={srcImg} workflowStatusId={workflowStatusId} statusWF={statusWF} actualAccount={actualAccount} statusButton={statusButton} owner={owner} handleWorkflow={handleWorkflow} />\n\n\n      {/* VOTERS */}\n      {(workflowStatusId === \"0\") &&\n        (actualAccount ? actualAccount.toUpperCase() === owner.toUpperCase() : true) &&\n        <div className=\"container mt-5\">\n          <Card className=\"text-center\">\n            <Card.Header className=\"fs-3 bg-light text-black\"><i class=\"bi bi-person-plus-fill\"> </i>\n              Enregistrer un nouveau voteur</Card.Header>\n            <Card.Body>\n              <Form>\n                <Form.Group className=\"mb-3\" controlId=\"formAddress\">\n                  <Form.Label>Saisir une adresse Ethereum</Form.Label>\n                  <InputGroup>\n                    <InputGroup.Text id=\"inputAddress\"><i class=\"bi bi-at\"></i></InputGroup.Text>\n                    <Form.Control type=\"text\" ref={refAddress} aria-describedby=\"inputAddress\"\n                      value={contentForm} onChange={(e) => setContentForm(e.target.value)} />\n                  </InputGroup>\n                </Form.Group>\n\n                <Button className=\"text-uppercase\" onClick={plusVoter} variant=\"info\" type=\"submit\">\n                  Enregistrer\n                </Button>\n              </Form>\n            </Card.Body>\n\n            {votersList[0] &&\n              <>\n                <Card.Footer className=\"fs-3 bg-light text-black\"><i class=\"bi bi-people-fill\"> </i>\n                  Liste des comptes autorisés</Card.Footer>\n                <ListGroup variant=\"flush\">\n                  {votersList &&\n                    votersList.map((a, i) => <ListGroup.Item key={i}>{a}</ListGroup.Item>)\n                  }\n                </ListGroup>\n              </>}\n          </Card>\n        </div>}\n\n\n      {/* PROPOSALS */}\n      {(workflowStatusId === \"1\") &&\n        <div className=\"container mt-5\">\n          <Card className=\"text-center\">\n            <Card.Header className=\"fs-3  bg-light text-black\"><i class=\"bi bi-chat-right-text\"> </i>\n              Enregistrer une nouvelle proposition</Card.Header>\n            <Card.Body>\n              <Form>\n                <Form.Group className=\"mb-3\" controlId=\"formAddress\">\n                  <Form.Label>Décrire votre proposition</Form.Label>\n                  <InputGroup>\n                    <InputGroup.Text id=\"inputAddress\"><i class=\"bi bi-pen\"></i></InputGroup.Text>\n                    <Form.Control type=\"text\" ref={refProposal}\n                      value={contentForm} onChange={(e) => setContentForm(e.target.value)} />\n                  </InputGroup>\n                </Form.Group>\n\n                <Button className=\"text-uppercase\" onClick={plusProposal} variant=\"info\" type=\"submit\">\n                  Enregistrer\n                </Button>\n              </Form>\n            </Card.Body>\n\n            {proposalsList[0] &&\n              <>\n                <Card.Header className=\"fs-3  bg-light text-black\"><i class=\"bi bi-list-task\"> </i>\n                  Liste des propositions</Card.Header>\n                <ListGroup variant=\"flush\">\n                  {proposalsList &&\n                    proposalsList.map((a, i) => <ListGroup.Item key={i}>{a[0]}</ListGroup.Item>)\n                  }\n                </ListGroup>\n              </>}\n          </Card>\n        </div>}\n\n\n      {/* VOTING */}\n      {(workflowStatusId === \"3\") &&\n        !voteOK &&\n        <div className=\"container mt-5\">\n          <Card className=\"text-center\">\n            <Card.Header className=\"fs-3 bg-light text-black\"><i class=\"bi bi-check-circle-fill\"> </i>\n              Voter pour une proposition</Card.Header>\n            <Card.Body>\n              <Form onSubmit={handleVote}>\n                <Form.Group className=\"text-start mb-3\">\n                  {proposalsList &&\n                    proposalsList.map((a, i) =>\n                      <Form.Check\n                        key={i}\n                        onChange={(e) => setCurrentVote(e.target.id)}\n                        type=\"radio\"\n                        label={a[0]}\n                        name=\"formRadios\"\n                        id={i}\n                      />)\n                  }\n                </Form.Group>\n                <Form.Group >\n                  <Button className=\"text-uppercase\" variant=\"info\" type=\"submit\">Voter</Button>\n                </Form.Group>\n              </Form>\n            </Card.Body>\n          </Card>\n        </div>}\n\n\n      {/* RESULT */}\n      {(workflowStatusId === \"5\") &&\n        <div className=\"container mt-5\">\n          <Card className=\"text-center\">\n            <Card.Header className=\"fs-3 bg-light text-black\"><i class=\"bi bi-trophy-fill\"> </i>\n              Proposition(s) adoptée(s)</Card.Header>\n            <ListGroup variant=\"flush\" className=\"fs-4\">\n              {winnersList &&\n                winnersList.map((a, i) => <ListGroup.Item className=\"bg-info\" key={i}>{a[0]}</ListGroup.Item>)\n              }\n            </ListGroup>\n          </Card>\n          <Card className=\"text-center mt-5\">\n            <Card.Header className=\"fs-3 bg-light text-black\"><i class=\"bi bi-sort-numeric-down\"> </i>\n              Résultats des votes</Card.Header>\n            <Table striped bordered>\n              <thead>\n                <tr>\n                  <th>Nombre de votes</th>\n                  <th>Propositions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {proposalsList &&\n                  [...proposalsList]\n                    .sort((a, b) => !b[1] - !a[1] || b[1] - a[1])\n                    .map((a, i) => <tr key={i}><td>{a[1]}</td><td>{a[0]}</td></tr>)\n                }\n              </tbody>\n            </Table>\n          </Card>\n        </div>}\n\n      {showAlert &&\n        <ModalAlert showAlert={showAlert} messageAlert={messageAlert} closeModalAlert={closeModalAlert} />\n      }\n      {showEvent &&\n        <ModalEvent showEvent={showEvent} messageEvent={messageEvent} closeModalEvent={closeModalEvent} />\n      }\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import 'bootstrap/dist/css/bootstrap.min.css'\nimport 'bootstrap-dark-5/dist/css/bootstrap-dark.css'\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}