{"version":3,"sources":["getWeb3.js","components/ModalAlert.jsx","components/ModalEvent.jsx","components/Workflow.jsx","img/ethereum.svg","components/Voters.jsx","components/Proposals.jsx","components/Voting.jsx","components/Results.jsx","img/0.svg","img/1.svg","img/2.svg","img/3.svg","img/4.svg","img/5.svg","img/logo1.svg","img/logo2.svg","App.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","ModalAlert","props","showAlert","messageAlert","closeModalAlert","Modal","show","onHide","dialogClassName","Header","closeButton","className","Title","id","class","Body","ModalEvent","showEvent","messageEvent","closeModalEvent","Workflow","srcImg","workflowStatusId","statusWF","txtWF","actualAccount","statusButton","owner","handleWorkflow","src","alt","width","height","loading","toUpperCase","length","Form","Button","onClick","variant","test","type","Voters","contentForm","refAddress","votersList","plusVoter","onChangeTargetValue","Group","controlId","Label","InputGroup","hasValidation","Text","Control","ref","value","onChange","isInvalid","isValid","Card","ListGroup","map","i","Item","Proposals","refProposal","proposalsList","plusProposal","FloatingLabel","as","style","Voting","handleVote","onChangeTargetId","onSubmit","Check","label","name","Results","winnersList","Table","striped","bordered","sort","b","App","useState","accounts","contract","data","setData","setShowAlert","setMessageAlert","setShowEvent","setMessageEvent","setContentForm","eventValue","setEventValue","setWorkflowStatusId","setActualAccount","voter","setVoter","setVotersList","setProposalsList","currentVote","setCurrentVote","voteOK","setVoteOK","setWinnersList","img0","setSrcImg","useRef","e","target","useEffect","init","on","img1","img2","img3","img4","img5","methods","getVoter","call","hasVoted","old","eth","getAccounts","net","getId","networkId","deployedNetwork","VotingContract","networks","instance","Contract","abi","address","getWorkflowStatus","statusId","events","allEvents","err","evt","event","alert","error","preventDefault","startProposalsRegistering","send","from","endProposalsRegistering","startVotingSession","fetchAllProposals","endVotingSession","handleResult","message","current","addVoter","val","addProposal","getAllProposals","list","setVote","tallyVotesDraw","getWinners","logo1","logo2","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c3e54a69.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React from 'react'\r\nimport Modal from 'react-bootstrap/Modal';\r\n\r\n\r\nconst ModalAlert = (props) => {\r\n  const { showAlert, messageAlert, closeModalAlert } = props\r\n  return (\r\n    <>\r\n      <Modal\r\n        show={showAlert}\r\n        onHide={closeModalAlert}\r\n        dialogClassName=\"modal-90w\"\r\n        aria-labelledby=\"alert-modal\">\r\n        <Modal.Header closeButton className=\"bg-warning text-black\">\r\n          <Modal.Title id=\"alert-modal\">\r\n            <i class=\"bi bi-exclamation-octagon-fill\"></i> ALERTE\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body className=\"bg-warning text-black bg-opacity-75 fs-4\">{messageAlert}</Modal.Body>\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ModalAlert\r\n","import React from 'react'\r\nimport Modal from 'react-bootstrap/Modal';\r\n\r\n\r\nconst ModalEvent = (props) => {\r\n  const { showEvent, messageEvent, closeModalEvent } = props\r\n  return (\r\n    <>\r\n      <Modal\r\n        show={showEvent}\r\n        onHide={closeModalEvent}\r\n        dialogClassName=\"modal-90w\"\r\n        aria-labelledby=\"alert-modal\">\r\n        <Modal.Header closeButton className=\"bg-success text-white\">\r\n          <Modal.Title id=\"alert-modal\">\r\n            <i class=\"bi bi-check-square-fill\"></i> VALIDATION\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body className=\"bg-success text-white bg-opacity-75 fs-4\">{messageEvent}</Modal.Body>\r\n      </Modal>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ModalEvent\r\n","import React from 'react'\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\nconst Workflow = (props) => {\r\n  const { srcImg, workflowStatusId, statusWF, txtWF, actualAccount, statusButton, owner, handleWorkflow } = props\r\n  return (\r\n    <div className='bg-dark bg-gradient py-5'>\r\n\r\n      <div className=\"container py-1\">\r\n        <div className=\"row align-items-center\">\r\n          <div className=\"col-lg-5\">\r\n            <img className='float-start img-fluid' src={srcImg} alt=\"propA\" width=\"500\" height=\"500\" loading=\"lazy\" />\r\n          </div>\r\n          <div className=\"col-lg-7 ps-5 py-3 text-lg-start\">\r\n            <h1 className='fw-bold text-white mb-2'>{statusWF[workflowStatusId]}</h1>\r\n            <div className=\"lead text-light mb-4\">{txtWF[workflowStatusId]}</div>\r\n            {(actualAccount ? actualAccount.toUpperCase() === owner.toUpperCase() : true) &&\r\n            workflowStatusId < statusButton.length &&\r\n            <Form>\r\n              <Button className=\"text-uppercase\" onClick={handleWorkflow}\r\n                variant={/[13]/.test(workflowStatusId) ? \"danger\" : \"success\"} type=\"submit\">\r\n                <i className={/[13]/.test(workflowStatusId) ? \"bi bi-stop-circle-fill\" : \"bi bi-play-circle-fill\"}> </i>\r\n                {workflowStatusId < statusButton.length ? statusButton[workflowStatusId] : \"Terminé\"}\r\n              </Button>\r\n            </Form>}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Workflow\r\n","export default __webpack_public_path__ + \"static/media/ethereum.e732bb84.svg\";","import React from 'react'\r\nimport Card from 'react-bootstrap/Card';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\n\r\nimport ethereum from \"../img/ethereum.svg\";\r\n\r\n\r\nconst Voters = (props) => {\r\n  const { contentForm, refAddress, votersList, plusVoter, onChangeTargetValue } = props\r\n\r\n  return (\r\n    <section className=\"bg-light py-5\">\r\n      <div className=\"container mt-5\">\r\n\r\n        <div className=\"container my-5\">\r\n          <div className=\"text-center mb-5\">\r\n            <div className=\"fs-3 d-inline-flex bg-info text-white rounded-3 mb-3 px-3 py-2\">\r\n              <i className=\"bi bi-person-plus-fill\"></i></div>\r\n            <h2 className=\"fw-bolder\">Enregistrer un nouveau voteur</h2>\r\n            <p className=\"lead mb-0\">Section réservée à l'administrateur</p>\r\n          </div>\r\n\r\n          <div className=\"row justify-content-center pb-4\">\r\n            <div className=\"col-lg-6\">\r\n              <Form className=\"text-center d-grid gap-2\">\r\n                <Form.Group className=\"mb-3\" controlId=\"formAddress\">\r\n                  <Form.Label>Saisir une adresse Ethereum valide</Form.Label>\r\n                  <InputGroup hasValidation>\r\n                    <InputGroup.Text id=\"inputAddress\">\r\n                      <img src={ethereum} alt=\"\" height=\"20\" />\r\n                    </InputGroup.Text>\r\n                    <Form.Control type=\"text\" ref={refAddress} aria-describedby=\"inputAddress\"\r\n                      value={contentForm} onChange={onChangeTargetValue}\r\n                      isInvalid={!/^0x[a-fA-F0-9]{40}$/.test(contentForm)}\r\n                      isValid={/^0x[a-fA-F0-9]{40}$/.test(contentForm)}\r\n                    />\r\n                  </InputGroup>\r\n                </Form.Group>\r\n\r\n                <Button className=\"text-center btn-lg\" onClick={plusVoter} variant=\"primary\" type=\"submit\">\r\n                  Enregistrer\r\n                </Button>\r\n              </Form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n\r\n        {votersList[0] &&\r\n          <Card className=\"my-5 mx-auto text-center col-lg-6 border-info\">\r\n            <Card.Header className=\"py-3 fs-3 bg-info text-white\"><i class=\"bi bi-people-fill\"> </i>\r\n              Liste des comptes autorisés</Card.Header>\r\n            <ListGroup variant=\"flush\">\r\n              {votersList &&\r\n                votersList.map((a, i) => <ListGroup.Item key={i}>{a[1]}</ListGroup.Item>)}\r\n            </ListGroup>\r\n          </Card>}\r\n\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Voters\r\n","import React from 'react'\r\nimport Card from 'react-bootstrap/Card';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport FloatingLabel from 'react-bootstrap/FloatingLabel';\r\n\r\nconst Proposals = (props) => {\r\n  const { contentForm, refProposal, proposalsList, plusProposal, onChangeTargetValue } = props\r\n\r\n  return (\r\n    <section className=\"bg-light py-5\">\r\n      <div className=\"container mt-5\">\r\n\r\n        <div className=\"container my-5\">\r\n          <div className=\"text-center mb-5\">\r\n            <div className=\"fs-3 d-inline-flex bg-info text-white rounded-3 mb-3 px-3 py-2\">\r\n              <i className=\"bi bi-chat-right-text\"></i></div>\r\n            <h2 className=\"fw-bolder\">Enregistrer une nouvelle proposition</h2>\r\n          </div>\r\n\r\n          <div className=\"row justify-content-center pb-4\">\r\n            <div className=\"col-lg-6\">\r\n              <Form className=\"text-center d-grid gap-2\">\r\n                <Form.Group className=\"mb-3\" controlId=\"formAddress\">\r\n                  <Form.Label>Saisir une proposition conforme aux conditions du SNP</Form.Label>\r\n                  <FloatingLabel controlId=\"floatingTextarea2\" >\r\n                    <Form.Control\r\n                      ref={refProposal}\r\n                      value={contentForm} onChange={onChangeTargetValue}\r\n                      as=\"textarea\"\r\n                      style={{ height: '100px' }}\r\n                    />\r\n                  </FloatingLabel>\r\n                </Form.Group>\r\n\r\n                <Button className=\"text-center btn-lg\" onClick={plusProposal} variant=\"primary\" type=\"submit\">\r\n                  Enregistrer\r\n                </Button>\r\n              </Form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {proposalsList[0] &&\r\n          <Card className=\"my-5 mx-auto text-center col-lg-9 border-info\">\r\n            <Card.Header className=\"py-3 fs-3 bg-info text-white\"><i class=\"bi bi-list-task\"> </i>\r\n              Liste des propositions</Card.Header>\r\n            <ListGroup variant=\"flush\">\r\n              {proposalsList &&\r\n                proposalsList.map((a, i) => <ListGroup.Item\r\n                  className=\"text-start\"\r\n                  key={i}>{a[0]}</ListGroup.Item>)}\r\n            </ListGroup>\r\n          </Card>}\r\n\r\n      </div>\r\n    </section >\r\n  )\r\n}\r\n\r\nexport default Proposals\r\n","import React from 'react'\r\nimport Card from 'react-bootstrap/Card';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nconst Voting = (props) => {\r\n  const { handleVote, proposalsList, onChangeTargetId } = props\r\n\r\n  return (\r\n    <section className=\"bg-light py-5\">\r\n      <div className=\"container mt-5\">\r\n      \r\n        <Card className=\"my-5 mx-auto text-center col-lg-9 border-info\">\r\n          <Card.Header className=\"py-3 fs-3 bg-info text-white\"><i class=\"bi bi-check-circle-fill\"> </i>\r\n            Voter pour une proposition</Card.Header>\r\n          <Card.Body>\r\n            <Form onSubmit={handleVote}>\r\n              <Form.Group className=\"text-start mb-3\">\r\n                {proposalsList &&\r\n                  proposalsList.map((a, i) =>\r\n                    <Form.Check className=\"mb-3\"\r\n                      key={i}\r\n                      onChange={onChangeTargetId}\r\n                      type=\"radio\"\r\n                      label={a[0]}\r\n                      name=\"formRadios\"\r\n                      id={i}\r\n                    />)\r\n                }\r\n              </Form.Group>\r\n              <Form.Group className=\"text-center d-grid gap-2 py-2\">\r\n                <Button className=\"text-center btn-lg\" variant=\"primary\" type=\"submit\">Voter</Button>\r\n              </Form.Group>\r\n            </Form>\r\n          </Card.Body>\r\n        </Card>\r\n\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Voting\r\n","import React from 'react'\r\nimport Card from 'react-bootstrap/Card';\r\nimport Table from 'react-bootstrap/Table';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\n\r\nconst Results = (props) => {\r\n  const { winnersList, proposalsList } = props\r\n\r\n  return (\r\n    <section className=\"bg-light py-5\">\r\n      <div className=\"container mt-5\">\r\n\r\n        <section className=\"py-4 border-bottom\">\r\n          <div className=\"container px-5 \">\r\n            <div className=\"text-center mb-5\">\r\n              <h2 className=\"fw-bolder\">Proposition(s) adoptée(s)</h2>\r\n            </div>\r\n\r\n            <div className=\"row gx-5 justify-content-center\">\r\n              <div className=\"col-lg-7\">\r\n\r\n                <div className=\"card mb-4 bg-primary\">\r\n                  <div className=\"card-body p-4\">\r\n                    <div className=\"d-flex\">\r\n                      <div className=\"flex-shrink-0\"><i className=\"bi bi-trophy-fill text-primary fs-1 text-secondary\"></i></div>\r\n                      <div className=\"ms-3\">\r\n                        <ListGroup variant=\"flush\" className=\"fs-5\">\r\n                          {winnersList &&\r\n                            winnersList.map((a, i) => <ListGroup.Item className=\"mb-1 text-start bg-primary text-white\" key={i}>{a[0]}</ListGroup.Item>)\r\n                          }\r\n                        </ListGroup>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n\r\n\r\n        <Card className=\"text-center my-5  border border-info\">\r\n          <Card.Header className=\"fs-3 bg-info text-white\"><i class=\"bi bi-sort-numeric-down\"> </i>\r\n            Résultats des votes</Card.Header>\r\n          <Table striped bordered>\r\n            <thead>\r\n              <tr>\r\n                <th>Nombre de votes</th>\r\n                <th>Propositions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {proposalsList &&\r\n                [...proposalsList]\r\n                  .sort((a, b) => !b[1] - !a[1] || b[1] - a[1])\r\n                  .map((a, i) => <tr key={i}><td>{a[1]}</td><td className='text-start'>{a[0]}</td></tr>)\r\n              }\r\n            </tbody>\r\n          </Table>\r\n        </Card>\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Results\r\n","export default __webpack_public_path__ + \"static/media/0.8acc16fa.svg\";","export default __webpack_public_path__ + \"static/media/1.d19eb2ef.svg\";","export default __webpack_public_path__ + \"static/media/2.09ed3e16.svg\";","export default __webpack_public_path__ + \"static/media/3.1f0bfb15.svg\";","export default __webpack_public_path__ + \"static/media/4.a1081bc0.svg\";","export default __webpack_public_path__ + \"static/media/5.1daf3b2f.svg\";","export default __webpack_public_path__ + \"static/media/logo1.e9c0bdde.svg\";","export default __webpack_public_path__ + \"static/media/logo2.0547caed.svg\";","import React, { useState, useEffect, useRef } from \"react\";\r\nimport VotingContract from \"./contracts/Voting.json\";\r\nimport getWeb3 from \"./getWeb3\";\r\n\r\nimport ModalAlert from './components/ModalAlert'\r\nimport ModalEvent from './components/ModalEvent'\r\nimport Workflow from './components/Workflow'\r\nimport Voters from './components/Voters'\r\nimport Proposals from './components/Proposals'\r\nimport Voting from './components/Voting'\r\nimport Results from './components/Results'\r\n\r\nimport img0 from \"./img/0.svg\";\r\nimport img1 from \"./img/1.svg\";\r\nimport img2 from \"./img/2.svg\";\r\nimport img3 from \"./img/3.svg\";\r\nimport img4 from \"./img/4.svg\";\r\nimport img5 from \"./img/5.svg\";\r\nimport logo1 from \"./img/logo1.svg\";\r\nimport logo2 from \"./img/logo2.svg\";\r\n\r\nconst App = () => {\r\n  const [data, setData] = useState({\r\n    web3: null,\r\n    accounts: null,\r\n    owner: null,\r\n    contract: null,\r\n  });\r\n\r\n  const [showAlert, setShowAlert] = useState(false)\r\n  const [messageAlert, setMessageAlert] = useState('')\r\n  const [showEvent, setShowEvent] = useState(false)\r\n  const [messageEvent, setMessageEvent] = useState('')\r\n  const [contentForm, setContentForm] = useState('')\r\n  const [eventValue, setEventValue] = useState('')\r\n  const [workflowStatusId, setWorkflowStatusId] = useState(\"0\")\r\n  const [actualAccount, setActualAccount] = useState('')\r\n  const [voter, setVoter] = useState(null)\r\n  const [votersList, setVotersList] = useState([])\r\n  const [proposalsList, setProposalsList] = useState([])\r\n  const [currentVote, setCurrentVote] = useState(null)\r\n  const [voteOK, setVoteOK] = useState(false)\r\n  const [winnersList, setWinnersList] = useState(null)\r\n  const [srcImg, setSrcImg] = useState(img0)\r\n\r\n  const statusWF = [\r\n    'Enregistrement des voteurs en cours',\r\n    'Enregistrement des propositions en cours',\r\n    'Enregistrement des propositions terminée',\r\n    'Session de vote en cours',\r\n    'Session de vote terminée',\r\n    'Résultats des votes'\r\n  ]\r\n  const txtWF = [\r\n    \"L'administrateur enregistre actuellement l'adresse de chaque compte Ethereum des participants éligibles au dépot de propositions suivi des votes.\",\r\n    \"Vous pouvez dés à présent enregistrer une ou plusieurs propositions. Chaque proposition doit être conforme aux conditions du SNP et fait l'objet d'une vérification de recevabilité avant démarrage de la session de vote.\",\r\n    \"Chaque proposition est désormais en cours de vérification de recevabilité avant démarrage de la session de vote.\",\r\n    \"Vous pouvez dés à présent voter pour une et une seule proposition.\",\r\n    \"Chaque vote est désormais enregistré. L'administrateur publiera rapidement les résultats.\",\r\n    \"Les propositions et votes enregistrés dans la blockchain sont immuables, infalsifiables et à disposition du public.\"\r\n  ]\r\n  const statusButton = [\r\n    \"Débuter l'enregistrement des propositions\",\r\n    \"Stopper l'enregistrement des propositions\",\r\n    \"Débuter la session de vote\",\r\n    \"Stopper la session de vote\",\r\n    \"Afficher le résultat des votes\"\r\n  ]\r\n\r\n  const refAddress = useRef();\r\n  const refProposal = useRef();\r\n\r\n  const closeModalAlert = () => setShowAlert(false)\r\n  const closeModalEvent = () => setShowEvent(false)\r\n  const onChangeTargetValue = (e) => setContentForm(e.target.value)\r\n  const onChangeTargetId = (e) => setCurrentVote(e.target.id)\r\n\r\n\r\n  useEffect(() => {\r\n    init();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    window.ethereum.on(\"accountsChanged\", accounts => {\r\n      if (accounts.length > 0) setActualAccount(accounts[0]);\r\n    });\r\n  });\r\n\r\n  useEffect(() => {\r\n    switch (workflowStatusId) {\r\n      case \"1\":\r\n        setSrcImg(img1)\r\n        break;\r\n      case \"2\":\r\n        setSrcImg(img2)\r\n        break;\r\n      case \"3\":\r\n        setSrcImg(img3)\r\n        break;\r\n      case \"4\":\r\n        setSrcImg(img4)\r\n        break;\r\n      case \"5\":\r\n        setSrcImg(img5)\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    console.log(`workflowStatusId`, workflowStatusId)\r\n  }, [workflowStatusId]);\r\n\r\n  useEffect(() => {\r\n    (workflowStatusId === \"3\") && (async () => {\r\n      const { contract } = data;\r\n      const voter = await contract.methods.getVoter(actualAccount).call();\r\n      setVoteOK(voter.hasVoted)\r\n    })()\r\n  }, [actualAccount])\r\n\r\n  useEffect(() => {\r\n    if (voter) {\r\n      setVotersList(old => [...old, voter])\r\n      setVoter(null)\r\n    }\r\n    console.log(`votersList`, votersList)\r\n  }, [voter]);\r\n\r\n  useEffect(() => {\r\n    if (eventValue === \"VoterRegistered\") {\r\n      setMessageEvent(\"Le voteur a été enregistré\")\r\n      setShowEvent(true)\r\n      setEventValue('')\r\n    }\r\n    if (eventValue === \"ProposalRegistered\") {\r\n      setMessageEvent(\"La proposition a été enregistrée\")\r\n      setShowEvent(true)\r\n      setEventValue('')\r\n    }\r\n    if (eventValue === \"Voted\") {\r\n      setMessageEvent(\"Le vote a été enregistré\")\r\n      setShowEvent(true)\r\n      setEventValue('')\r\n    }\r\n  }, [eventValue]);\r\n\r\n  const init = async () => {\r\n    try {\r\n      // Get network provider and web3 instance.\r\n      const web3 = await getWeb3();\r\n\r\n      // Use web3 to get the user's accounts.\r\n      const accounts = await web3.eth.getAccounts();\r\n      const owner = await accounts[0];\r\n\r\n      // Get the contract instance.\r\n      const networkId = await web3.eth.net.getId();\r\n      const deployedNetwork = VotingContract.networks[networkId];\r\n      const instance = new web3.eth.Contract(\r\n        VotingContract.abi,\r\n        deployedNetwork && deployedNetwork.address\r\n      );\r\n\r\n      const statusId = await instance.methods.getWorkflowStatus().call()\r\n      setWorkflowStatusId(statusId)\r\n\r\n      // Set web3, accounts, and contract to the data, and then proceed with an\r\n      // example of interacting with the contract's methods.\r\n      setData({ web3, accounts, owner, contract: instance });\r\n\r\n      // Get All events emitted\r\n      await instance.events.allEvents((err, evt) => {\r\n        setEventValue(evt.event)\r\n      })\r\n\r\n    } catch (error) {\r\n      // Catch any errors for any of the above operations.\r\n      alert(\r\n        `Failed to load web3, accounts, or contract. Check console for details.`\r\n      );\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const handleWorkflow = async (e) => {\r\n    e.preventDefault()\r\n    setEventValue('')\r\n    try {\r\n      const { owner, contract } = data;\r\n      switch (workflowStatusId) {\r\n        case \"0\":\r\n          await contract.methods.startProposalsRegistering().send({ from: owner });\r\n          break;\r\n        case \"1\":\r\n          await contract.methods.endProposalsRegistering().send({ from: owner });\r\n          break;\r\n        case \"2\":\r\n          await contract.methods.startVotingSession().send({ from: owner });\r\n          fetchAllProposals()\r\n          break;\r\n        case \"3\":\r\n          await contract.methods.endVotingSession().send({ from: owner });\r\n          break;\r\n        case \"4\":\r\n          handleResult()\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n      const statusId = await contract.methods.getWorkflowStatus().call()\r\n      setWorkflowStatusId(statusId)\r\n\r\n    } catch (error) {\r\n      console.log(`error`, error)\r\n      if (/Registering proposals cant be started now/.test(error.message)) {\r\n        setMessageAlert(\"L'enregistrement des propositions ne peut pas commencer maintenant !\")\r\n        setShowAlert(true)\r\n      } else if (/caller is not the owner/.test(error.message)) {\r\n        setMessageAlert(\"Vous n'êtes pas l'administrateur !\")\r\n        setShowAlert(true)\r\n      } else if (/Registering proposals havent started yet/.test(error.message)) {\r\n        setMessageAlert(\"L'enregistrement des propositions n'a pas commencé !\")\r\n        setShowAlert(true)\r\n      } else if (/Registering proposals phase is not finished/.test(error.message)) {\r\n        setMessageAlert(\"L'enregistrement des propositions n'est pas terminé !\")\r\n        setShowAlert(true)\r\n      } else if (/Voting session havent started yet/.test(error.message)) {\r\n        setMessageAlert(\"La session de votes n'a pas commencé !\")\r\n        setShowAlert(true)\r\n      } else if (/Current status is not voting session ended/.test(error.message)) {\r\n        setMessageAlert(\"La session de votes n'est pas terminé !\")\r\n        setShowAlert(true)\r\n      } else {\r\n        setMessageAlert('Erreur inconnue !')\r\n        setShowAlert(true)\r\n      }\r\n    }\r\n  }\r\n\r\n  const plusVoter = async (e) => {\r\n    e.preventDefault()\r\n    try {\r\n      const { contract, owner } = data;\r\n      const address = refAddress.current.value;\r\n\r\n      await contract.methods.addVoter(address).send({ from: owner });\r\n      const voter = await contract.methods.getVoter(address).call();\r\n      setVoter([voter, address])\r\n\r\n    } catch (error) {\r\n      // console.log(`error`, error.message)\r\n      if (/Already registered/.test(error.message)) {\r\n        setMessageAlert('Adresse déjà enregistrée !')\r\n        setShowAlert(true)\r\n      } else if (/caller is not the owner/.test(error.message)) {\r\n        setMessageAlert(\"Vous n'êtes pas l'administrateur !\")\r\n        setShowAlert(true)\r\n      } else if (/Voters registration is not open yet/.test(error.message)) {\r\n        setMessageAlert('Enregistrement des voteurs inactive !')\r\n        setShowAlert(true)\r\n      } else if (/The address cannot be empty/.test(error.message)) {\r\n        setMessageAlert(\"L'adresse ne peut être vide !\")\r\n        setShowAlert(true)\r\n      } else {\r\n        setMessageAlert('Erreur inconnue voter')\r\n        setShowAlert(true)\r\n      }\r\n    }\r\n    setContentForm(\"\")\r\n  }\r\n\r\n  const plusProposal = async (e) => {\r\n    setEventValue('')\r\n    e.preventDefault()\r\n    try {\r\n      const { owner, contract } = data;\r\n      const val = refProposal.current.value;\r\n\r\n      await contract.methods.addProposal(val).send({ from: actualAccount || owner });\r\n      fetchAllProposals()\r\n\r\n    } catch (error) {\r\n      if (/Proposals are not allowed yet/.test(error.message)) {\r\n        setMessageAlert(\"L'enregistrement des propositions n'est pas encore possible !\")\r\n        setShowAlert(true)\r\n      } else if (/The proposal cannot be empty/.test(error.message)) {\r\n        setMessageAlert('La proposition ne peut être vide !')\r\n        setShowAlert(true)\r\n      } else if (/You're not a voter/.test(error.message)) {\r\n        setMessageAlert(\"Vous n'êtes pas enregistré comme voteur !\")\r\n        setShowAlert(true)\r\n      } else {\r\n        setMessageAlert('Erreur inconnue proposal')\r\n        setShowAlert(true)\r\n        console.log(error)\r\n      }\r\n    }\r\n    setContentForm(\"\")\r\n  }\r\n\r\n  const fetchAllProposals = async () => {\r\n    const { contract } = data;\r\n    const list = await contract.methods.getAllProposals().call();\r\n    setProposalsList(list)\r\n  }\r\n\r\n  const handleVote = async (e) => {\r\n    setEventValue('')\r\n    e.preventDefault()\r\n    try {\r\n      const { owner, contract } = data;\r\n      fetchAllProposals()\r\n      await contract.methods.setVote(currentVote).send({ from: actualAccount || owner });\r\n      setVoteOK(true)\r\n\r\n    } catch (error) {\r\n      if (/Voting session havent started yet/.test(error.message)) {\r\n        setMessageAlert(\"La session de vote n'a pas encore débuté !\")\r\n        setShowAlert(true)\r\n      } else if (/You have already voted/.test(error.message)) {\r\n        setMessageAlert('Vous avez déjà voté !')\r\n        setShowAlert(true)\r\n      } else if (/Proposal not found/.test(error.message)) {\r\n        setMessageAlert(\"La proposition n'existe pas !\")\r\n        setShowAlert(true)\r\n      } else if (/You're not a voter/.test(error.message)) {\r\n        setMessageAlert(\"Vous n'êtes pas enregistré comme voteur !\")\r\n        setShowAlert(true)\r\n      } else {\r\n        setMessageAlert('Erreur inconnue vote')\r\n        setShowAlert(true)\r\n        console.log(error)\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleResult = async (e) => {\r\n    setEventValue('')\r\n    try {\r\n      const { owner, contract } = data;\r\n      fetchAllProposals()\r\n      await contract.methods.tallyVotesDraw().send({ from: owner });\r\n      const list = await contract.methods.getWinners().call();\r\n      setWinnersList(list)\r\n      const statusId = await contract.methods.getWorkflowStatus().call()\r\n      setWorkflowStatusId(statusId)\r\n\r\n    } catch (error) {\r\n      if (/Current status is not voting session ended/.test(error.message)) {\r\n        setMessageAlert(\"La session de vote n'est pas encore terminée !\")\r\n        setShowAlert(true)\r\n      } else if (/You're not a voter/.test(error.message)) {\r\n        setMessageAlert(\"Vous n'êtes pas enregistré comme voteur !\")\r\n        setShowAlert(true)\r\n      } else {\r\n        setMessageAlert('Erreur inconnue result')\r\n        setShowAlert(true)\r\n        console.log(error)\r\n      }\r\n    }\r\n  }\r\n\r\n  const { owner, web3 } = data\r\n  return !web3 ? (\r\n    <div className=\"container\">Loading Web3, accounts, and contract...</div>\r\n  ) : (\r\n\r\n    <div className=\"d-flex flex-column min-vh-100\">\r\n\r\n      <nav className='bg-black '>\r\n        <div className='container'>\r\n          <div className='row py-3'>\r\n            <div className=\"col text-start text-white fw-bold\">\r\n              <img src={logo1} className=\"d-inline-block align-top\" alt=\"\" height=\"35\" />\r\n            </div>\r\n            {/* <div class=\"col text-end text-white\">ouvert depuis 02:36</div> */}\r\n          </div>\r\n        </div>\r\n      </nav>\r\n\r\n      {/* WORKFLOW */}\r\n      <Workflow srcImg={srcImg} workflowStatusId={workflowStatusId} statusWF={statusWF} txtWF={txtWF} actualAccount={actualAccount} statusButton={statusButton} owner={owner} handleWorkflow={handleWorkflow} />\r\n\r\n\r\n      {/* VOTERS */}\r\n      {(workflowStatusId === \"0\") &&\r\n        (actualAccount ? actualAccount.toUpperCase() === owner.toUpperCase() : true) &&\r\n        workflowStatusId < statusButton.length &&\r\n        <Voters contentForm={contentForm} refAddress={refAddress} votersList={votersList} plusVoter={plusVoter} onChangeTargetValue={onChangeTargetValue} />\r\n      }\r\n\r\n      {/* PROPOSALS */}\r\n      {(workflowStatusId === \"1\") &&\r\n        <Proposals contentForm={contentForm} refProposal={refProposal} proposalsList={proposalsList} plusProposal={plusProposal} onChangeTargetValue={onChangeTargetValue} />\r\n      }\r\n\r\n      {/* VOTING */}\r\n      {(workflowStatusId === \"3\") &&\r\n        !voteOK &&\r\n        <Voting handleVote={handleVote} proposalsList={proposalsList} onChangeTargetId={onChangeTargetId} />\r\n      }\r\n\r\n      {/* RESULTS */}\r\n      {(workflowStatusId === \"5\") &&\r\n        <Results winnersList={winnersList} proposalsList={proposalsList} />\r\n      }\r\n\r\n      {showAlert &&\r\n        <ModalAlert showAlert={showAlert} messageAlert={messageAlert} closeModalAlert={closeModalAlert} />\r\n      }\r\n      {showEvent &&\r\n        <ModalEvent showEvent={showEvent} messageEvent={messageEvent} closeModalEvent={closeModalEvent} />\r\n      }\r\n\r\n      <footer className=\"mt-auto\">\r\n        <div className=\"py-5 bg-primary bg-gradient text-center\">\r\n          <img src={logo2} alt=\"\" height=\"100\" />\r\n        </div>\r\n        <div className=\"py-3 bg-black\">\r\n          <div className=\"container\"><p className=\"m-0 text-end text-white\">\r\n            Copyright &copy; ULTRASECURE 2021</p></div>\r\n        </div>\r\n      </footer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './custom.scss';\r\n// import 'bootstrap/dist/css/bootstrap.min.css'\r\n// import 'bootstrap-dark-5/dist/css/bootstrap-dark.css'\r\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n"],"sourceRoot":""}